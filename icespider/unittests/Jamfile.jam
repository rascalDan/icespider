import testing ;
import type : register ;
import generators : register-standard ;
import type ;
import feature : feature ;
import toolset : flags ;

type.register JSON : json ;

generators.register-standard $(__name__).routes2cpp : JSON : CPP ;
feature icespider : : free dependency ;
flags routes2cpp ICESPIDER <icespider> ;
flags routes2cpp INCLUDES <include> ;

actions routes2cpp bind ICESPIDER
{
	"$(ICESPIDER)" -I"$(INCLUDES)" $(2) $(1)
}

lib adhocutil : : : : <include>/usr/include/adhocutil ;
lib slicer : : : : <include>/usr/include/slicer ;
lib slicer-json : : : : <include>/usr/include/slicer ;
lib slicer-xml : : : : <include>/usr/include/slicer ;
lib boost_utf : : <name>boost_unit_test_framework ;
lib boost_system ;
lib dl ;
path-constant me : . ;

alias testCommon : :
	<define>ROOT=\"$(me)\"
	<library>..//Ice
	<library>..//IceUtil
	: :
	<library>..//IceUtil
	<library>..//Ice
	<library>boost_utf
	<define>ROOT=\"$(me)\"
	;

run
	testCompile.cpp
	: :
	testRoutes.json
	:
	<define>BOOST_TEST_DYN_LINK
	<library>testCommon
	<library>test-api
	<library>dl
	<library>adhocutil
	<library>slicer-xml
	<library>../xslt//icespider-xslt
	<library>../core//icespider-core
	<library>../compile//icespider-compile
	<implicit-dependency>../compile//icespider-compile
	<dependency>../core
	: testCompile :
	;

run
	testApp.cpp
	testRoutes.json
	: :
	xslt/transform.xslt
	:
	<define>BOOST_TEST_DYN_LINK
	<icespider>../compile//icespider
	<library>testCommon
	<library>test-api
	<library>adhocutil
	<library>slicer
	<library>slicer-json
	<library>slicer-xml
	<library>../common//icespider-common
	<library>../core//icespider-core
	<library>../xslt//icespider-xslt
	<implicit-dependency>../common//icespider-common
	<implicit-dependency>test-api
	<dependency>../compile
	: testApp ;

run
	testFcgi.cpp
	../fcgi/cgiRequestBase.cpp
	../common/http.ice
	: : :
	<define>BOOST_TEST_DYN_LINK
	<slicer>pure
	<allow-ice>yes
	<library>testCommon
	<library>../common//icespider-common
	<library>../core//icespider-core
	<library>boost_system
	<library>slicer
	<include>../fcgi
	: testFcgi ;

lib test-api :
	test-api.ice
	:
	<slicer>yes
	<library>slicer
	<library>adhocutil
	<library>..//pthread
	<library>..//Ice
	<library>..//IceUtil
	;

